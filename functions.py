{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy as sp\n",
    "import scipy.stats as stats\n",
    "from scipy.stats import zscore\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
    "\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.stats import diagnostic as diag\n",
    "import statsmodels.stats.api as sms\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.tsa.api as smt\n",
    "\n",
    "def std_describe(df):\n",
    "    '''Retrieves the summary of a pd.DataFrame, adds a metric that represents\n",
    "       3 standard deviations, and returns the summary.\n",
    "    \n",
    "            @params\n",
    "            df is a pd.DataFrame\n",
    "    \n",
    "            @output\n",
    "            summary of a pd.DataFrame.describe() with standard deviation metric added\n",
    "    '''\n",
    "    print('       Description with |3| STD Report: ', round(df_percent_null, 3), '\\n')\n",
    "    print('<------------------------------------------------------>')\n",
    "    desc_df = df.describe()\n",
    "\n",
    "    desc_df.loc['+3_std'] = desc_df.loc['mean'] + (desc_df.loc['std'] * 3)\n",
    "    desc_df.loc['-3_std'] = desc_df.loc['mean'] - (desc_df.loc['std'] * 3)\n",
    "    print('<------------------------------------------------------>')\n",
    "    \n",
    "    return desc_df\n",
    "\n",
    "\n",
    "def percent_null_df(df):\n",
    "    ''' Prints the percentage of null values for the entire dataframe and\n",
    "    in each column of a dataframe\n",
    "    \n",
    "    @params\n",
    "    df is a pd.DataFrame\n",
    "    df_percent_null is the percentage null for the entire dataframe\n",
    "    x is a list of strings containing the column names for missing_data\n",
    "    missing_data is a pd.Dataframe containing x columns\n",
    "    columns is a list of strings that contain the names of the columns in df\n",
    "    col is an instance of the list of strings columns\n",
    "    icolumn_name is a string containing the name of the column\n",
    "    imissing_data is the sum of null values in col\n",
    "    imissing_in_percentage returns a percentage of null values in col as a float\n",
    "    missing_data.loc[len(missing_data)] creates a row containing the column name and percent null\n",
    "    \n",
    "    @output\n",
    "    a pd.DataFrame containing the names of each col in df and their percent null values\n",
    "    '''\n",
    "    \n",
    "    print('       Percent Null Report: ', round(df_percent_null, 3), '\\n')\n",
    "    print('<------------------------------------------------------>')\n",
    "    print('       Total Percent Null For Data Frame: ', round(x, 3), '\\n')\n",
    "    print('<------------------------------------------------------> \\n')\n",
    "    x = ['column_name','missing_data', 'missing_in_percentage']\n",
    "    missing_data = pd.DataFrame(columns=x)\n",
    "    columns = df.columns\n",
    "    for col in columns:\n",
    "        icolumn_name = col\n",
    "        imissing_data = df[col].isnull().sum()\n",
    "        imissing_in_percentage = round((df[col].isnull().sum()/df[col].shape[0])*100, 3)\n",
    "        missing_data.loc[len(missing_data)] = [icolumn_name, imissing_data, imissing_in_percentage]\n",
    "    missing_data = missing_data.sort_values(by = 'missing_in_percentage', ascending=False)\n",
    "    print('           Total Percent Null by Column')\n",
    "    print(missing_data)\n",
    "    print('<------------------------------------------------------>')\n",
    "\n",
    "\n",
    "def obtain_data(csv):\n",
    "    df = pd.read_csv(csv)\n",
    "    print(df.info())\n",
    "    print(std_describe(df))\n",
    "    print(percent_null_df(df))\n",
    "    return df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:learn-env] *",
   "language": "python",
   "name": "conda-env-learn-env-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
